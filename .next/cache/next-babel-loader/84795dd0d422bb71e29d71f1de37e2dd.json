{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/Desktop/bio-products-ssr/UI/Dropdown/Dropdown.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport { useScrollPosition } from \"../../Hooks/useScrollPosition\";\nimport { Transition } from \"react-transition-group\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\nimport Link from \"next/link\";\nimport SocialMedia from '../SocialMedia/SocialMedia';\nimport { Nav, List, MenuItem, Background } from \"../../StyledComponents/dropdownItems\"; //dropdown\n\nconst Dropdown = ({\n  dropDownTitle,\n  subCategoryHandler,\n  dropDownTogglerHandler,\n  useOnProducts,\n  showDropDown,\n  subItems\n}) => {\n  const {\n    0: scrollY,\n    1: setScrollY\n  } = useState(0);\n  useScrollPosition(({\n    currPos\n  }) => {\n    setScrollY(currPos.y);\n  }, [showDropDown], false, false, 0); //this is to avoid top scrolling when entering/leaving the dropdown\n\n  useEffect(() => {\n    const bodyStyle = document.body.style;\n    bodyStyle.position = \"\";\n    bodyStyle.top = \"\";\n    bodyStyle.left = \"\";\n    bodyStyle.right = \"\";\n    window.scrollTo(scrollY, scrollY * -1);\n\n    if (showDropDown) {\n      bodyStyle.position = \"fixed\";\n      bodyStyle.top = `${scrollY}px`;\n      bodyStyle.left = \"0\";\n      bodyStyle.right = \"0\";\n    }\n  }, [showDropDown]);\n  return __jsx(Transition, {\n    in: showDropDown,\n    timeout: 500,\n    mountOnEnter: true,\n    unmountOnExit: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, state => __jsx(Nav, {\n    state: state,\n    onClick: dropDownTogglerHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, __jsx(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, __jsx(ToolbarNav, {\n    subItems: subItems,\n    showDropDown: showDropDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }\n  }))));\n};\n\nexport default Dropdown; //navigation for the toolbar\n\nconst ToolbarNav = ({\n  subItems,\n  showDropDown\n}) => {\n  const {\n    0: allowBackground,\n    1: setAllowBackground\n  } = useState(false);\n  const {\n    0: backgroundToggledLink,\n    1: setBackgroundToggledLink\n  } = useState(false);\n  useEffect(() => {\n    //this piece of state is to avoid the background appearance while the menu opens\n    setTimeout(() => {\n      setAllowBackground(true);\n    }, [550]); //remove background images once the toolbar slides up for UI purposes as the mouse will hover those links\n    //the cleanup on unmount does not trigger on time, so I moved it before the component unmounts here\n\n    if (!showDropDown) {\n      setAllowBackground(false);\n    }\n  }, [showDropDown]);\n\n  const navItemMouseEnter = path => {\n    setBackgroundToggledLink(path);\n  };\n\n  const navItemMouseLeave = () => {\n    setBackgroundToggledLink(false);\n  };\n\n  const navItems = subItems.map(item => __jsx(React.Fragment, {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, __jsx(NavItem, {\n    path: item.path,\n    label: item.label,\n    mouseEntered: () => navItemMouseEnter(item.background),\n    mouseLeft: navItemMouseLeave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), window.innerWidth > 640 && __jsx(Background, {\n    showBackground: backgroundToggledLink === item.background,\n    backgroundImage: allowBackground && item.background,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  })));\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, navItems, __jsx(SocialMedia, {\n    iconSize: \"4x\",\n    pattern: \"menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }));\n}; //main navItem\n\n\nconst NavItem = ({\n  path,\n  label,\n  mouseEntered,\n  mouseLeft\n}) => {\n  return __jsx(MenuItem, {\n    onMouseLeave: mouseLeft,\n    onMouseEnter: mouseEntered,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, __jsx(Link, {\n    href: path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, label)));\n};","map":{"version":3,"sources":["/Users/Dev/Desktop/bio-products-ssr/UI/Dropdown/Dropdown.js"],"names":["React","useState","useEffect","Fragment","useScrollPosition","Transition","FontAwesomeIcon","faChevronDown","Link","SocialMedia","Nav","List","MenuItem","Background","Dropdown","dropDownTitle","subCategoryHandler","dropDownTogglerHandler","useOnProducts","showDropDown","subItems","scrollY","setScrollY","currPos","y","bodyStyle","document","body","style","position","top","left","right","window","scrollTo","state","ToolbarNav","allowBackground","setAllowBackground","backgroundToggledLink","setBackgroundToggledLink","setTimeout","navItemMouseEnter","path","navItemMouseLeave","navItems","map","item","id","label","background","innerWidth","NavItem","mouseEntered","mouseLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\nimport { useScrollPosition } from \"../../Hooks/useScrollPosition\";\nimport { Transition } from \"react-transition-group\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\nimport Link from \"next/link\";\nimport SocialMedia from '../SocialMedia/SocialMedia';\nimport {\n  Nav,\n  List,\n  MenuItem,\n  Background,\n} from \"../../StyledComponents/dropdownItems\";\n\n//dropdown\nconst Dropdown = ({\n  dropDownTitle,\n  subCategoryHandler,\n  dropDownTogglerHandler,\n  useOnProducts,\n  showDropDown,\n  subItems,\n}) => {\n  const [scrollY, setScrollY] = useState(0);\n  useScrollPosition(\n    ({ currPos }) => {\n      setScrollY(currPos.y);\n    },\n    [showDropDown],\n    false,\n    false,\n    0\n  );\n  //this is to avoid top scrolling when entering/leaving the dropdown\n  useEffect(() => {\n    const bodyStyle = document.body.style;\n    bodyStyle.position = \"\";\n    bodyStyle.top = \"\";\n    bodyStyle.left = \"\";\n    bodyStyle.right = \"\";\n    window.scrollTo(scrollY, scrollY * -1);\n    if (showDropDown) {\n      bodyStyle.position = \"fixed\";\n      bodyStyle.top = `${scrollY}px`;\n      bodyStyle.left = \"0\";\n      bodyStyle.right = \"0\";\n    }\n  }, [showDropDown]);\n\n  return (\n    <Transition in={showDropDown} timeout={500} mountOnEnter unmountOnExit>\n      {(state) => (\n        <Nav state={state} onClick={dropDownTogglerHandler}>\n          <List>\n           <ToolbarNav subItems={subItems} showDropDown={showDropDown}/>\n          </List>\n        </Nav>\n      )}\n    </Transition>\n  );\n};\nexport default Dropdown;\n\n//navigation for the toolbar\nconst ToolbarNav = ({ subItems, showDropDown }) => {\n  const [allowBackground, setAllowBackground] = useState(false);\n  const [backgroundToggledLink, setBackgroundToggledLink] = useState(false);\n  useEffect(() => {\n    //this piece of state is to avoid the background appearance while the menu opens\n    setTimeout(() => {\n      setAllowBackground(true);\n    }, [550]);\n    //remove background images once the toolbar slides up for UI purposes as the mouse will hover those links\n    //the cleanup on unmount does not trigger on time, so I moved it before the component unmounts here\n    if(!showDropDown) {\n      setAllowBackground(false)\n    }\n  }, [showDropDown]);\n\n  const navItemMouseEnter = (path) => {\n    setBackgroundToggledLink(path);\n  };\n\n  const navItemMouseLeave = () => {\n    setBackgroundToggledLink(false);\n  };\n\n  const navItems = subItems.map((item) => (\n    <React.Fragment key={item.id}>\n      <NavItem\n        path={item.path}\n        label={item.label}\n        mouseEntered={() => navItemMouseEnter(item.background)}\n        mouseLeft={navItemMouseLeave}\n      />\n      {window.innerWidth > 640 && (\n        <Background\n        showBackground={backgroundToggledLink === item.background}\n        backgroundImage={allowBackground && item.background}\n      />\n      )}\n    </React.Fragment>\n  ));\n\n  return (\n    <Fragment>\n      {navItems}\n      <SocialMedia iconSize=\"4x\" pattern=\"menu\"/>\n    </Fragment>\n  );\n};\n\n//main navItem\nconst NavItem = ({ path, label, mouseEntered, mouseLeft }) => {\n  return (\n    <MenuItem onMouseLeave={mouseLeft} onMouseEnter={mouseEntered}>\n      <Link href={path}>\n        <a>{label}</a>\n      </Link>\n    </MenuItem>\n  );\n};"]},"metadata":{},"sourceType":"module"}
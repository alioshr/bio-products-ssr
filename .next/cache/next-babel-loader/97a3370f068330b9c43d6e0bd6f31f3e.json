{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { useScrollPosition } from \"./useScrollPosition\";\nexport const useLockBodyScroll = ({\n  dispatcher\n}) => {\n  const {\n    0: scrollY,\n    1: setScrollY\n  } = useState(0);\n  useScrollPosition(({\n    currPos\n  }) => {\n    console.log();\n    setScrollY(currPos.y);\n  }, [dispatcher], false, false, 0); //this is to avoid top scrolling when entering/leaving the dropdown\n\n  useEffect(() => {\n    const bodyStyle = document.body.style;\n    bodyStyle.position = \"\";\n    bodyStyle.top = \"\";\n    bodyStyle.left = \"\";\n    bodyStyle.right = \"\";\n    window.scrollTo(scrollY, scrollY * -1);\n\n    if (dispatcher) {\n      console.log('dipatcher ran!', dispatcher);\n      bodyStyle.position = \"fixed\";\n      bodyStyle.top = `${scrollY}px`;\n      bodyStyle.left = \"0\";\n      bodyStyle.right = \"0\";\n    }\n  }, [dispatcher]);\n};","map":{"version":3,"sources":["/Users/Dev/Desktop/bio-products-ssr/Hooks/useLockBodyScroll.js"],"names":["useState","useEffect","useScrollPosition","useLockBodyScroll","dispatcher","scrollY","setScrollY","currPos","console","log","y","bodyStyle","document","body","style","position","top","left","right","window","scrollTo"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AACnD,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBN,QAAQ,CAAC,CAAD,CAAtC;AAEAE,EAAAA,iBAAiB,CACf,CAAC;AAAEK,IAAAA;AAAF,GAAD,KAAiB;AACbC,IAAAA,OAAO,CAACC,GAAR;AACFH,IAAAA,UAAU,CAACC,OAAO,CAACG,CAAT,CAAV;AACD,GAJc,EAKf,CAACN,UAAD,CALe,EAMf,KANe,EAOf,KAPe,EAQf,CARe,CAAjB,CAHmD,CAanD;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,SAAS,GAAGC,QAAQ,CAACC,IAAT,CAAcC,KAAhC;AACEH,IAAAA,SAAS,CAACI,QAAV,GAAqB,EAArB;AACAJ,IAAAA,SAAS,CAACK,GAAV,GAAgB,EAAhB;AACAL,IAAAA,SAAS,CAACM,IAAV,GAAiB,EAAjB;AACAN,IAAAA,SAAS,CAACO,KAAV,GAAkB,EAAlB;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBf,OAAhB,EAAyBA,OAAO,GAAG,CAAC,CAApC;;AACF,QAAID,UAAJ,EAAgB;AACZI,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BL,UAA9B;AACFO,MAAAA,SAAS,CAACI,QAAV,GAAqB,OAArB;AACAJ,MAAAA,SAAS,CAACK,GAAV,GAAiB,GAAEX,OAAQ,IAA3B;AACAM,MAAAA,SAAS,CAACM,IAAV,GAAiB,GAAjB;AACAN,MAAAA,SAAS,CAACO,KAAV,GAAkB,GAAlB;AACD;AACF,GAdQ,EAcN,CAACd,UAAD,CAdM,CAAT;AAeD,CA7BM","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useScrollPosition } from \"./useScrollPosition\";\n\nexport const useLockBodyScroll = ({ dispatcher }) => {\n  const [scrollY, setScrollY] = useState(0);\n\n  useScrollPosition(\n    ({ currPos }) => {\n        console.log()\n      setScrollY(currPos.y);\n    },\n    [dispatcher],\n    false,\n    false,\n    0\n  );\n  //this is to avoid top scrolling when entering/leaving the dropdown\n  useEffect(() => {\n    const bodyStyle = document.body.style;\n      bodyStyle.position = \"\";\n      bodyStyle.top = \"\";\n      bodyStyle.left = \"\";\n      bodyStyle.right = \"\";\n      window.scrollTo(scrollY, scrollY * -1);\n    if (dispatcher) {\n        console.log('dipatcher ran!', dispatcher)\n      bodyStyle.position = \"fixed\";\n      bodyStyle.top = `${scrollY}px`;\n      bodyStyle.left = \"0\";\n      bodyStyle.right = \"0\";\n    }\n  }, [dispatcher]);\n};\n"]},"metadata":{},"sourceType":"module"}
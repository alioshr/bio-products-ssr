{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nexport function useWindowDimension() {\n  const {\n    0: dimension,\n    1: setDimension\n  } = useState([window.innerWidth, window.innerHeight]);\n  useEffect(() => {\n    const debouncedResizeHandler = debounce(() => {\n      console.log('***** debounced resize'); // See the cool difference in console\n\n      setDimension([window.innerWidth, window.innerHeight]);\n    }, 100); // 100ms\n\n    window.addEventListener('resize', debouncedResizeHandler);\n    return () => window.removeEventListener('resize', debouncedResizeHandler);\n  }, []); // Note this empty array. this effect should run only on mount and unmount\n\n  return dimension;\n}\n\nfunction debounce(fn, ms) {\n  let timer;\n  return _ => {\n    clearTimeout(timer);\n    timer = setTimeout(_ => {\n      timer = null;\n      fn.apply(this, arguments);\n    }, ms);\n  };\n}","map":{"version":3,"sources":["/Users/Dev/Desktop/bio-products-ssr/Hooks/useWindowDimension.js"],"names":["React","useState","useEffect","useWindowDimension","dimension","setDimension","window","innerWidth","innerHeight","debouncedResizeHandler","debounce","console","log","addEventListener","removeEventListener","fn","ms","timer","_","clearTimeout","setTimeout","apply","arguments"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACnC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BJ,QAAQ,CAAC,CACzCK,MAAM,CAACC,UADkC,EAEzCD,MAAM,CAACE,WAFkC,CAAD,CAA1C;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,sBAAsB,GAAGC,QAAQ,CAAC,MAAM;AAC5CC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAD4C,CACL;;AACvCP,MAAAA,YAAY,CAAC,CAACC,MAAM,CAACC,UAAR,EAAoBD,MAAM,CAACE,WAA3B,CAAD,CAAZ;AACD,KAHsC,EAGpC,GAHoC,CAAvC,CADc,CAIL;;AACTF,IAAAA,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkCJ,sBAAlC;AACA,WAAO,MAAMH,MAAM,CAACQ,mBAAP,CAA2B,QAA3B,EAAqCL,sBAArC,CAAb;AACD,GAPQ,EAON,EAPM,CAAT,CALmC,CAY3B;;AACR,SAAOL,SAAP;AACD;;AAED,SAASM,QAAT,CAAkBK,EAAlB,EAAsBC,EAAtB,EAA0B;AACxB,MAAIC,KAAJ;AACA,SAAOC,CAAC,IAAI;AACVC,IAAAA,YAAY,CAACF,KAAD,CAAZ;AACAA,IAAAA,KAAK,GAAGG,UAAU,CAACF,CAAC,IAAI;AACtBD,MAAAA,KAAK,GAAG,IAAR;AACAF,MAAAA,EAAE,CAACM,KAAH,CAAS,IAAT,EAAeC,SAAf;AACD,KAHiB,EAGfN,EAHe,CAAlB;AAID,GAND;AAOD","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport function useWindowDimension() {\n  const [dimension, setDimension] = useState([\n    window.innerWidth,\n    window.innerHeight,\n  ]);\n  useEffect(() => {\n    const debouncedResizeHandler = debounce(() => {\n      console.log('***** debounced resize'); // See the cool difference in console\n      setDimension([window.innerWidth, window.innerHeight]);\n    }, 100); // 100ms\n    window.addEventListener('resize', debouncedResizeHandler);\n    return () => window.removeEventListener('resize', debouncedResizeHandler);\n  }, []); // Note this empty array. this effect should run only on mount and unmount\n  return dimension;\n}\n\nfunction debounce(fn, ms) {\n  let timer;\n  return _ => {\n    clearTimeout(timer);\n    timer = setTimeout(_ => {\n      timer = null;\n      fn.apply(this, arguments);\n    }, ms);\n  };\n}"]},"metadata":{},"sourceType":"module"}
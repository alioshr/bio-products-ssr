{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/Dev/Desktop/bio-products-ssr/UI/Dropdown/Dropdown.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { useScrollPosition } from \"../../Hooks/useScrollPosition\";\nimport { Transition } from \"react-transition-group\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\nimport Link from \"next/link\";\nimport { Nav, List, MenuItem, Background } from \"../../StyledComponents/dropdownItems\"; //dropdown\n\nvar Dropdown = function Dropdown(_ref) {\n  _s();\n\n  var dropDownTitle = _ref.dropDownTitle,\n      subCategoryHandler = _ref.subCategoryHandler,\n      dropDownTogglerHandler = _ref.dropDownTogglerHandler,\n      useOnToolbar = _ref.useOnToolbar,\n      showDropDown = _ref.showDropDown,\n      subItems = _ref.subItems;\n\n  var _useState = useState(0),\n      scrollY = _useState[0],\n      setScrollY = _useState[1];\n\n  useScrollPosition(function (_ref2) {\n    var currPos = _ref2.currPos;\n    setScrollY(currPos.y);\n  }, [showDropDown], false, false, 0); //this is to avoid top scrolling when entering/leaving the dropdown\n\n  useEffect(function () {\n    document.body.style.position = \"\";\n    document.body.style.top = \"\";\n    document.body.style.left = \"0\";\n    document.body.style.right = \"0\";\n\n    if (showDropDown) {\n      document.body.style.position = \"fixed\";\n      document.body.style.top = \"\".concat(scrollY, \"px\");\n      document.body.style.left = \"0\";\n      document.body.style.right = \"0\";\n    }\n  }, [showDropDown]);\n  return __jsx(Transition, {\n    \"in\": showDropDown,\n    timeout: 500,\n    mountOnEnter: true,\n    unmountOnExit: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, function (state) {\n    return __jsx(Nav, {\n      state: state,\n      onClick: dropDownTogglerHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, __jsx(List, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, useOnToolbar && __jsx(ToolbarNav, {\n      subItems: subItems,\n      showDropDown: showDropDown,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 28\n      }\n    })));\n  });\n};\n\n_s(Dropdown, \"w0YrMI37twwCUgEUTVkLPlMY9hc=\", false, function () {\n  return [useScrollPosition];\n});\n\n_c = Dropdown;\nexport default Dropdown; //main navItem\n\nvar NavItem = function NavItem(_ref3) {\n  var path = _ref3.path,\n      label = _ref3.label,\n      mouseEntered = _ref3.mouseEntered,\n      mouseLeft = _ref3.mouseLeft;\n  return __jsx(MenuItem, {\n    onMouseLeave: mouseLeft,\n    onMouseEnter: mouseEntered,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, __jsx(Link, {\n    href: path,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, label)));\n}; //navigation for the toolbar\n\n\n_c2 = NavItem;\n\nvar ToolbarNav = function ToolbarNav(_ref4) {\n  _s2();\n\n  var subItems = _ref4.subItems,\n      showDropDown = _ref4.showDropDown;\n\n  var _useState2 = useState(false),\n      allowBackground = _useState2[0],\n      setAllowBackground = _useState2[1];\n\n  var _useState3 = useState(false),\n      backgroundToggledLink = _useState3[0],\n      setBackgroundToggledLink = _useState3[1];\n\n  useEffect(function () {\n    //this piece of state is to avoid the background appearance while the menu opens\n    setTimeout(function () {\n      setAllowBackground(true);\n    }, [550]); //remove background images once the toolbar slides up for UI purposes as the mouse will hover those links\n    //the cleanup on unmount does not trigger on time, so I moved it before the component unmounts here\n\n    if (!showDropDown) {\n      setAllowBackground(false);\n    }\n  }, [showDropDown]);\n\n  var navItemMouseEnter = function navItemMouseEnter(path) {\n    setBackgroundToggledLink(path);\n  };\n\n  var navItemMouseLeave = function navItemMouseLeave() {\n    setBackgroundToggledLink(false);\n  };\n\n  var navItems = subItems.map(function (item) {\n    return __jsx(React.Fragment, {\n      key: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }\n    }, __jsx(NavItem, {\n      path: item.path,\n      label: item.label,\n      mouseEntered: function mouseEntered() {\n        return navItemMouseEnter(item.background);\n      },\n      mouseLeft: navItemMouseLeave,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }), window.innerWidth >= 640 && __jsx(Background, {\n      showBackground: backgroundToggledLink === item.background,\n      backgroundImage: allowBackground && item.background,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }));\n  });\n  return navItems;\n};\n\n_s2(ToolbarNav, \"F12Hel/1UT4nAhzKIMk+Dy3O7hw=\");\n\n_c3 = ToolbarNav;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Dropdown\");\n$RefreshReg$(_c2, \"NavItem\");\n$RefreshReg$(_c3, \"ToolbarNav\");","map":{"version":3,"sources":["/Users/Dev/Desktop/bio-products-ssr/UI/Dropdown/Dropdown.js"],"names":["React","useState","useEffect","useScrollPosition","Transition","FontAwesomeIcon","faChevronDown","Link","Nav","List","MenuItem","Background","Dropdown","dropDownTitle","subCategoryHandler","dropDownTogglerHandler","useOnToolbar","showDropDown","subItems","scrollY","setScrollY","currPos","y","document","body","style","position","top","left","right","state","NavItem","path","label","mouseEntered","mouseLeft","ToolbarNav","allowBackground","setAllowBackground","backgroundToggledLink","setBackgroundToggledLink","setTimeout","navItemMouseEnter","navItemMouseLeave","navItems","map","item","id","background","window","innerWidth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useScrollPosition } from \"../../Hooks/useScrollPosition\";\nimport { Transition } from \"react-transition-group\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\nimport Link from \"next/link\";\nimport {\n  Nav,\n  List,\n  MenuItem,\n  Background,\n} from \"../../StyledComponents/dropdownItems\";\n\n//dropdown\nconst Dropdown = ({\n  dropDownTitle,\n  subCategoryHandler,\n  dropDownTogglerHandler,\n  useOnToolbar,\n  showDropDown,\n  subItems,\n}) => {\n  const [scrollY, setScrollY] = useState(0);\n  useScrollPosition(\n    ({ currPos }) => {\n      setScrollY(currPos.y);\n    },\n    [showDropDown],\n    false,\n    false,\n    0\n  );\n  //this is to avoid top scrolling when entering/leaving the dropdown\n  useEffect(() => {\n    document.body.style.position = \"\";\n    document.body.style.top = \"\";\n    document.body.style.left = \"0\";\n    document.body.style.right = \"0\";\n    if (showDropDown) {\n      document.body.style.position = \"fixed\";\n      document.body.style.top = `${scrollY}px`;\n      document.body.style.left = \"0\";\n      document.body.style.right = \"0\";\n    }\n  }, [showDropDown]);\n\n  return (\n    <Transition in={showDropDown} timeout={500} mountOnEnter unmountOnExit>\n      {(state) => (\n        <Nav state={state} onClick={dropDownTogglerHandler}>\n          <List>\n          {useOnToolbar && <ToolbarNav subItems={subItems} showDropDown={showDropDown}/>}\n          </List>\n        </Nav>\n      )}\n    </Transition>\n  );\n};\nexport default Dropdown;\n\n//main navItem\nconst NavItem = ({ path, label, mouseEntered, mouseLeft }) => {\n  return (\n    <MenuItem onMouseLeave={mouseLeft} onMouseEnter={mouseEntered}>\n      <Link href={path}>\n        <a>{label}</a>\n      </Link>\n    </MenuItem>\n  );\n};\n\n//navigation for the toolbar\nconst ToolbarNav = ({ subItems, showDropDown }) => {\n  const [allowBackground, setAllowBackground] = useState(false);\n  const [backgroundToggledLink, setBackgroundToggledLink] = useState(false);\n  useEffect(() => {\n    //this piece of state is to avoid the background appearance while the menu opens\n    setTimeout(() => {\n      setAllowBackground(true);\n    }, [550]);\n    //remove background images once the toolbar slides up for UI purposes as the mouse will hover those links\n    //the cleanup on unmount does not trigger on time, so I moved it before the component unmounts here\n    if(!showDropDown) {\n      setAllowBackground(false)\n    }\n  }, [showDropDown]);\n\n  const navItemMouseEnter = (path) => {\n    setBackgroundToggledLink(path);\n  };\n\n  const navItemMouseLeave = () => {\n    setBackgroundToggledLink(false);\n  };\n\n  const navItems = subItems.map((item) => (\n    <React.Fragment key={item.id}>\n      <NavItem\n        path={item.path}\n        label={item.label}\n        mouseEntered={() => navItemMouseEnter(item.background)}\n        mouseLeft={navItemMouseLeave}\n      />\n      {window.innerWidth >= 640 && (\n        <Background\n        showBackground={backgroundToggledLink === item.background}\n        backgroundImage={allowBackground && item.background}\n      />\n      )}\n    </React.Fragment>\n  ));\n\n  return navItems;\n};"]},"metadata":{},"sourceType":"module"}
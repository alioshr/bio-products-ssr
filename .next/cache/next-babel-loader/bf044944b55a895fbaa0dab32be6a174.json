{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nexport function useWindowDimension() {\n  const {\n    0: clientWindow,\n    1: setClientWindow\n  } = useState(undefined);\n  const {\n    0: dimension,\n    1: setDimension\n  } = useState([window.innerWidth, window.innerHeight]);\n  useEffect(() => {\n    setClientWindow(window);\n  }, []);\n  useEffect(() => {\n    if (clientWindow !== undefined) {}\n\n    return () => window.removeEventListener('resize', debouncedResizeHandler);\n  }, [clientWindow]); // Note this empty array. this effect should run only on mount and unmount\n\n  return dimension;\n}\n\nfunction debounce(fn, ms) {\n  let timer;\n  return _ => {\n    clearTimeout(timer);\n    timer = setTimeout(_ => {\n      timer = null;\n      fn.apply(this, arguments);\n    }, ms);\n  };\n}","map":{"version":3,"sources":["/Users/Dev/Desktop/bio-products-ssr/Hooks/useWindowDimension.js"],"names":["React","useState","useEffect","useWindowDimension","clientWindow","setClientWindow","undefined","dimension","setDimension","window","innerWidth","innerHeight","removeEventListener","debouncedResizeHandler","debounce","fn","ms","timer","_","clearTimeout","setTimeout","apply","arguments"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACnC,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCJ,QAAQ,CAACK,SAAD,CAAhD;AAEA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BP,QAAQ,CAAC,CACzCQ,MAAM,CAACC,UADkC,EAEzCD,MAAM,CAACE,WAFkC,CAAD,CAA1C;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,eAAe,CAACI,MAAD,CAAf;AACD,GAFQ,EAEP,EAFO,CAAT;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACf,QAAGE,YAAY,KAAKE,SAApB,EAA+B,CAE9B;;AACA,WAAO,MAAMG,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCC,sBAArC,CAAb;AACD,GALQ,EAKN,CAACT,YAAD,CALM,CAAT,CAZmC,CAiBf;;AAEpB,SAAOG,SAAP;AACD;;AAED,SAASO,QAAT,CAAkBC,EAAlB,EAAsBC,EAAtB,EAA0B;AACxB,MAAIC,KAAJ;AACA,SAAOC,CAAC,IAAI;AACVC,IAAAA,YAAY,CAACF,KAAD,CAAZ;AACAA,IAAAA,KAAK,GAAGG,UAAU,CAACF,CAAC,IAAI;AACtBD,MAAAA,KAAK,GAAG,IAAR;AACAF,MAAAA,EAAE,CAACM,KAAH,CAAS,IAAT,EAAeC,SAAf;AACD,KAHiB,EAGfN,EAHe,CAAlB;AAID,GAND;AAOD","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport function useWindowDimension() {\n  const [clientWindow, setClientWindow] = useState(undefined);\n\n  const [dimension, setDimension] = useState([\n    window.innerWidth,\n    window.innerHeight,\n  ]);\n\n  useEffect(() => {\n    setClientWindow(window)\n  },[])\n\n  useEffect(() => {\n   if(clientWindow !== undefined) {\n     \n   }\n    return () => window.removeEventListener('resize', debouncedResizeHandler);\n  }, [clientWindow]); // Note this empty array. this effect should run only on mount and unmount\n\n  return dimension;\n}\n\nfunction debounce(fn, ms) {\n  let timer;\n  return _ => {\n    clearTimeout(timer);\n    timer = setTimeout(_ => {\n      timer = null;\n      fn.apply(this, arguments);\n    }, ms);\n  };\n}"]},"metadata":{},"sourceType":"module"}
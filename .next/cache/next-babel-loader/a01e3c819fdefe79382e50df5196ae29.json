{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/Desktop/bio-products-ssr/UI/Dropdown/Dropdown.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { useScrollPosition } from \"../../Hooks/useScrollPosition\";\nimport { Transition } from \"react-transition-group\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\nimport Link from \"next/link\";\nimport { Wrapper, List, MenuItem, Background } from \"../../StyledComponents/dropdownItems\";\n\nconst NavItem = ({\n  path,\n  label,\n  mouseEntered,\n  mouseLeft\n}) => {\n  return __jsx(MenuItem, {\n    onMouseLeave: mouseLeft,\n    onMouseEnter: mouseEntered,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(Link, {\n    href: path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, label)));\n};\n\nconst ToolbarNav = ({\n  subItems,\n  cleanupResult\n}) => {\n  const {\n    0: allowBackground,\n    1: setAllowBackground\n  } = useState(false);\n  const {\n    0: backgroundToggledLink,\n    1: setBackgroundToggledLink\n  } = useState(false);\n  console.log(allowBackground);\n  useEffect(() => {\n    //this piece of state is to avoid the background appearance while the menu opens\n    setTimeout(() => {\n      setAllowBackground(true);\n    }, [550]);\n    return () => {\n      setAllowBackground(false);\n      cleanupResult();\n    }; //cleanUp on unmount\n  }, []);\n\n  const navItemMouseEnter = path => {\n    setBackgroundToggledLink(path);\n  };\n\n  const navItemMouseLeave = () => {\n    setBackgroundToggledLink(false);\n  };\n\n  const navItems = subItems.map(item => __jsx(React.Fragment, {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(NavItem, {\n    path: item.path,\n    label: item.label,\n    mouseEntered: () => navItemMouseEnter(item.background),\n    mouseLeft: navItemMouseLeave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), __jsx(Background, {\n    showBackground: backgroundToggledLink === item.background,\n    backgroundImage: allowBackground && item.background,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  })));\n  return navItems;\n};\n\nconst Dropdown = ({\n  dropDownTitle,\n  subCategoryHandler,\n  useOnToolbar,\n  dropDownTogglerHandler,\n  showDropDown,\n  subItems\n}) => {\n  const {\n    0: scrollY,\n    1: setScrollY\n  } = useState(0);\n  useScrollPosition(({\n    currPos\n  }) => {\n    setScrollY(currPos.y);\n  }, [showDropDown], false, false, 0); //this is to avoid top scrolling when entering/leaving the dropdown\n\n  useEffect(() => {\n    document.body.style.position = \"\";\n    document.body.style.top = \"\";\n    window.scrollTo(scrollY, scrollY * -1);\n\n    if (showDropDown) {\n      document.body.style.position = \"fixed\";\n      document.body.style.top = `${scrollY}px`;\n    }\n  }, [showDropDown]);\n  const navItemsMemoized = useMemo(() => __jsx(ToolbarNav, {\n    subItems: subItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 42\n    }\n  }), [showDropDown]);\n  return __jsx(Transition, {\n    in: showDropDown,\n    timeout: 500,\n    mountOnEnter: true,\n    unmountOnExit: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, state => __jsx(Wrapper, {\n    state: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, __jsx(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, navItemsMemoized)));\n};\n\nexport default Dropdown;","map":{"version":3,"sources":["/Users/Dev/Desktop/bio-products-ssr/UI/Dropdown/Dropdown.js"],"names":["React","useState","useEffect","useMemo","useScrollPosition","Transition","FontAwesomeIcon","faChevronDown","Link","Wrapper","List","MenuItem","Background","NavItem","path","label","mouseEntered","mouseLeft","ToolbarNav","subItems","cleanupResult","allowBackground","setAllowBackground","backgroundToggledLink","setBackgroundToggledLink","console","log","setTimeout","navItemMouseEnter","navItemMouseLeave","navItems","map","item","id","background","Dropdown","dropDownTitle","subCategoryHandler","useOnToolbar","dropDownTogglerHandler","showDropDown","scrollY","setScrollY","currPos","y","document","body","style","position","top","window","scrollTo","navItemsMemoized","state"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,QAAoD,OAApD;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SACEC,OADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,UAJF,QAKO,sCALP;;AAOA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,YAAf;AAA6BC,EAAAA;AAA7B,CAAD,KAA8C;AAC5D,SACE,MAAC,QAAD;AAAU,IAAA,YAAY,EAAEA,SAAxB;AAAmC,IAAA,YAAY,EAAED,YAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEF,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,KAAJ,CADF,CADF,CADF;AAOD,CARD;;AAUA,MAAMG,UAAU,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAiC;AAClD,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCrB,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM;AAAA,OAACsB,qBAAD;AAAA,OAAwBC;AAAxB,MAAoDvB,QAAQ,CAAC,KAAD,CAAlE;AACAwB,EAAAA,OAAO,CAACC,GAAR,CAAYL,eAAZ;AACAnB,EAAAA,SAAS,CAAC,MAAM;AACd;AACAyB,IAAAA,UAAU,CAAC,MAAM;AACfL,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,KAFS,EAEP,CAAC,GAAD,CAFO,CAAV;AAGA,WAAO,MAAM;AACXA,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAF,MAAAA,aAAa;AACd,KAHD,CALc,CAQZ;AACH,GATQ,EASN,EATM,CAAT;;AAWA,QAAMQ,iBAAiB,GAAId,IAAD,IAAU;AAClCU,IAAAA,wBAAwB,CAACV,IAAD,CAAxB;AACD,GAFD;;AAIA,QAAMe,iBAAiB,GAAG,MAAM;AAC9BL,IAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACD,GAFD;;AAIA,QAAMM,QAAQ,GAAGX,QAAQ,CAACY,GAAT,CAAcC,IAAD,IAC5B,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,GAAG,EAAEA,IAAI,CAACC,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AACE,IAAA,IAAI,EAAED,IAAI,CAAClB,IADb;AAEE,IAAA,KAAK,EAAEkB,IAAI,CAACjB,KAFd;AAGE,IAAA,YAAY,EAAE,MAAMa,iBAAiB,CAACI,IAAI,CAACE,UAAN,CAHvC;AAIE,IAAA,SAAS,EAAEL,iBAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE,MAAC,UAAD;AACE,IAAA,cAAc,EAAEN,qBAAqB,KAAKS,IAAI,CAACE,UADjD;AAEE,IAAA,eAAe,EAAEb,eAAe,IAAIW,IAAI,CAACE,UAF3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADe,CAAjB;AAcA,SAAOJ,QAAP;AACD,CAtCD;;AAwCA,MAAMK,QAAQ,GAAG,CAAC;AAChBC,EAAAA,aADgB;AAEhBC,EAAAA,kBAFgB;AAGhBC,EAAAA,YAHgB;AAIhBC,EAAAA,sBAJgB;AAKhBC,EAAAA,YALgB;AAMhBrB,EAAAA;AANgB,CAAD,KAOX;AACJ,QAAM;AAAA,OAACsB,OAAD;AAAA,OAAUC;AAAV,MAAwBzC,QAAQ,CAAC,CAAD,CAAtC;AAEAG,EAAAA,iBAAiB,CACf,CAAC;AAAEuC,IAAAA;AAAF,GAAD,KAAiB;AACfD,IAAAA,UAAU,CAACC,OAAO,CAACC,CAAT,CAAV;AACD,GAHc,EAIf,CAACJ,YAAD,CAJe,EAKf,KALe,EAMf,KANe,EAOf,CAPe,CAAjB,CAHI,CAYJ;;AACAtC,EAAAA,SAAS,CAAC,MAAM;AACd2C,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,QAApB,GAA+B,EAA/B;AACAH,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,GAApB,GAA0B,EAA1B;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBV,OAAhB,EAAyBA,OAAO,GAAG,CAAC,CAApC;;AACA,QAAID,YAAJ,EAAkB;AAChBK,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,QAApB,GAA+B,OAA/B;AACAH,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,GAApB,GAA2B,GAAER,OAAQ,IAArC;AACD;AACF,GARQ,EAQN,CAACD,YAAD,CARM,CAAT;AAUA,QAAMY,gBAAgB,GAAGjD,OAAO,CAAC,MAAM,MAAC,UAAD;AAAY,IAAA,QAAQ,EAAEgB,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP,EAA2C,CAACqB,YAAD,CAA3C,CAAhC;AACA,SACE,MAAC,UAAD;AAAY,IAAA,EAAE,EAAEA,YAAhB;AAA8B,IAAA,OAAO,EAAE,GAAvC;AAA4C,IAAA,YAAY,MAAxD;AAAyD,IAAA,aAAa,MAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIa,KAAD,IACC,MAAC,OAAD;AAAS,IAAA,KAAK,EAAEA,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,gBADH,CADF,CAFJ,CADF;AAWD,CA1CD;;AA2CA,eAAejB,QAAf","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport { useScrollPosition } from \"../../Hooks/useScrollPosition\";\nimport { Transition } from \"react-transition-group\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\nimport Link from \"next/link\";\nimport {\n  Wrapper,\n  List,\n  MenuItem,\n  Background,\n} from \"../../StyledComponents/dropdownItems\";\n\nconst NavItem = ({ path, label, mouseEntered, mouseLeft }) => {\n  return (\n    <MenuItem onMouseLeave={mouseLeft} onMouseEnter={mouseEntered}>\n      <Link href={path}>\n        <a>{label}</a>\n      </Link>\n    </MenuItem>\n  );\n};\n\nconst ToolbarNav = ({ subItems, cleanupResult }) => {\n  const [allowBackground, setAllowBackground] = useState(false);\n  const [backgroundToggledLink, setBackgroundToggledLink] = useState(false);\n  console.log(allowBackground)\n  useEffect(() => {\n    //this piece of state is to avoid the background appearance while the menu opens\n    setTimeout(() => {\n      setAllowBackground(true);\n    }, [550]);\n    return () => {\n      setAllowBackground(false)\n      cleanupResult()\n    } //cleanUp on unmount\n  }, []);\n\n  const navItemMouseEnter = (path) => {\n    setBackgroundToggledLink(path);\n  };\n\n  const navItemMouseLeave = () => {\n    setBackgroundToggledLink(false);\n  };\n\n  const navItems = subItems.map((item) => (\n    <React.Fragment key={item.id}>\n      <NavItem\n        path={item.path}\n        label={item.label}\n        mouseEntered={() => navItemMouseEnter(item.background)}\n        mouseLeft={navItemMouseLeave}\n      />\n      <Background\n        showBackground={backgroundToggledLink === item.background}\n        backgroundImage={allowBackground && item.background}\n      />\n    </React.Fragment>\n  ));\n  return navItems;\n};\n\nconst Dropdown = ({\n  dropDownTitle,\n  subCategoryHandler,\n  useOnToolbar,\n  dropDownTogglerHandler,\n  showDropDown,\n  subItems,\n}) => {\n  const [scrollY, setScrollY] = useState(0);\n\n  useScrollPosition(\n    ({ currPos }) => {\n      setScrollY(currPos.y);\n    },\n    [showDropDown],\n    false,\n    false,\n    0\n  );\n  //this is to avoid top scrolling when entering/leaving the dropdown\n  useEffect(() => {\n    document.body.style.position = \"\";\n    document.body.style.top = \"\";\n    window.scrollTo(scrollY, scrollY * -1);\n    if (showDropDown) {\n      document.body.style.position = \"fixed\";\n      document.body.style.top = `${scrollY}px`;\n    }\n  }, [showDropDown]);\n\n  const navItemsMemoized = useMemo(() => <ToolbarNav subItems={subItems} />, [showDropDown])\n  return (\n    <Transition in={showDropDown} timeout={500} mountOnEnter unmountOnExit>\n      {(state) => (\n        <Wrapper state={state}>\n          <List>\n            {navItemsMemoized}\n          </List>\n        </Wrapper>\n      )}\n    </Transition>\n  );\n};\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}
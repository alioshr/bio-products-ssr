{"ast":null,"code":"import { useRef, useEffect } from \"react\";\nconst isBrowser = false;\n\nconst getScrolledPosition = ({\n  element,\n  useWindow\n}) => {\n  if (!isBrowser) return {\n    x: 0,\n    y: 0\n  };\n  const target = element ? element.current : document.body;\n  const position = target.getBoundingClientRect();\n  return useWindow ? {\n    x: window.scrollX,\n    y: window.scrollY\n  } : {\n    x: position.left,\n    y: position.top,\n    height: position.height,\n    width: position.width,\n    bottom: position.bottom\n  };\n};\n\nexport const useScrollPosition = (effect, deps, element, useWindow, wait) => {\n  const position = useRef(getScrolledPosition({\n    useWindow\n  }));\n  let throttleTimeout = null;\n\n  const callBack = () => {\n    const currPos = getScrolledPosition({\n      element: element,\n      useWindow\n    });\n    effect({\n      prevPos: position.current,\n      currPos\n    });\n    position.current = currPos;\n    throttleTimeout = null;\n  };\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (wait) {\n        if (throttleTimeout === null) {\n          throttleTimeout = setTimeout(callBack, wait);\n        }\n      } else {\n        callBack();\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, deps);\n};","map":{"version":3,"sources":["/Users/Dev/Desktop/bio-products-ssr/Hooks/useScrollPosition.js"],"names":["useRef","useEffect","isBrowser","getScrolledPosition","element","useWindow","x","y","target","current","document","body","position","getBoundingClientRect","window","scrollX","scrollY","left","top","height","width","bottom","useScrollPosition","effect","deps","wait","throttleTimeout","callBack","currPos","prevPos","handleScroll","setTimeout","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AAEA,MAAMC,SAAS,QAAf;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAA4B;AACtD,MAAI,CAACH,SAAL,EAAgB,OAAO;AAAEI,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAP;AAEhB,QAAMC,MAAM,GAAGJ,OAAO,GAAGA,OAAO,CAACK,OAAX,GAAqBC,QAAQ,CAACC,IAApD;AACA,QAAMC,QAAQ,GAAGJ,MAAM,CAACK,qBAAP,EAAjB;AACA,SAAOR,SAAS,GACZ;AAAEC,IAAAA,CAAC,EAAEQ,MAAM,CAACC,OAAZ;AAAqBR,IAAAA,CAAC,EAAEO,MAAM,CAACE;AAA/B,GADY,GAEZ;AACEV,IAAAA,CAAC,EAAEM,QAAQ,CAACK,IADd;AAEEV,IAAAA,CAAC,EAAEK,QAAQ,CAACM,GAFd;AAGEC,IAAAA,MAAM,EAAEP,QAAQ,CAACO,MAHnB;AAIEC,IAAAA,KAAK,EAAER,QAAQ,CAACQ,KAJlB;AAKEC,IAAAA,MAAM,EAAET,QAAQ,CAACS;AALnB,GAFJ;AASD,CAdD;;AAgBA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,MAAD,EAASC,IAAT,EAAepB,OAAf,EAAwBC,SAAxB,EAAmCoB,IAAnC,KAA4C;AAC3E,QAAMb,QAAQ,GAAGZ,MAAM,CAACG,mBAAmB,CAAC;AAAEE,IAAAA;AAAF,GAAD,CAApB,CAAvB;AACA,MAAIqB,eAAe,GAAG,IAAtB;;AACA,QAAMC,QAAQ,GAAG,MAAM;AACrB,UAAMC,OAAO,GAAGzB,mBAAmB,CAAC;AAAEC,MAAAA,OAAO,EAAEA,OAAX;AAAoBC,MAAAA;AAApB,KAAD,CAAnC;AACAkB,IAAAA,MAAM,CAAC;AAAEM,MAAAA,OAAO,EAAEjB,QAAQ,CAACH,OAApB;AAA6BmB,MAAAA;AAA7B,KAAD,CAAN;AACAhB,IAAAA,QAAQ,CAACH,OAAT,GAAmBmB,OAAnB;AACAF,IAAAA,eAAe,GAAG,IAAlB;AACD,GALD;;AAMAzB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6B,YAAY,GAAG,MAAM;AACzB,UAAIL,IAAJ,EAAU;AACR,YAAIC,eAAe,KAAK,IAAxB,EAA8B;AAC5BA,UAAAA,eAAe,GAAGK,UAAU,CAACJ,QAAD,EAAWF,IAAX,CAA5B;AACD;AACF,OAJD,MAIO;AACLE,QAAAA,QAAQ;AACT;AACF,KARD;;AASAb,IAAAA,MAAM,CAACkB,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AACA,WAAO,MAAMhB,MAAM,CAACmB,mBAAP,CAA2B,QAA3B,EAAqCH,YAArC,CAAb;AACD,GAZQ,EAYNN,IAZM,CAAT;AAaD,CAtBM","sourcesContent":["import { useRef, useEffect } from \"react\";\n\nconst isBrowser = typeof window !== `undefined`;\n\nconst getScrolledPosition = ({ element, useWindow }) => {\n  if (!isBrowser) return { x: 0, y: 0 };\n\n  const target = element ? element.current : document.body;\n  const position = target.getBoundingClientRect();\n  return useWindow\n    ? { x: window.scrollX, y: window.scrollY }\n    : {\n        x: position.left,\n        y: position.top,\n        height: position.height,\n        width: position.width,\n        bottom: position.bottom,\n      };\n};\n\nexport const useScrollPosition = (effect, deps, element, useWindow, wait) => {\n  const position = useRef(getScrolledPosition({ useWindow }));\n  let throttleTimeout = null;\n  const callBack = () => {\n    const currPos = getScrolledPosition({ element: element, useWindow });\n    effect({ prevPos: position.current, currPos });\n    position.current = currPos;\n    throttleTimeout = null;\n  };\n  useEffect(() => {\n    const handleScroll = () => {\n      if (wait) {\n        if (throttleTimeout === null) {\n          throttleTimeout = setTimeout(callBack, wait);\n        }\n      } else {\n        callBack();\n      }\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, deps);\n};\n"]},"metadata":{},"sourceType":"module"}
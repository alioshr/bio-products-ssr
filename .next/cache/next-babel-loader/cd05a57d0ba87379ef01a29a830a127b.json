{"ast":null,"code":"var _jsxFileName = \"/Users/Dev/Desktop/bio-products-ssr/Components/Products/Categories.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, createRef } from 'react';\nimport { Category, CategoryTitle, CategoryWrapper } from '../../StyledComponents/productsItems';\nimport { useClientWindow } from \"../../Hooks/useClientWindow\";\n\nconst Categories = ({\n  categories,\n  toggleCategory,\n  active\n}) => {\n  const catLength = categories.length;\n  const [elRefs, setElRefs] = React.useState([]);\n  const {\n    0: fitDevice,\n    1: setFitDevice\n  } = useState(null); // const window = useClientWindow();\n\n  useEffect(() => {\n    setElRefs(elRefs => Array(catLength).fill().map((_, i) => elRefs[i] || /*#__PURE__*/createRef()));\n  }, [categories]);\n  useEffect(() => {\n    if (elRefs.length > 0 && elRefs[0].current !== null) {\n      const margin = window.innerWidth < 640 ? 8 : 32; //hardcoded the margins\n\n      setFitDevice(elRefs.map(el => el.current.offsetWidth).reduce((a, b, index) => a + b + margin * index) <= window.innerWidth);\n    }\n  }, [elRefs]);\n  console.log(window);\n  const catTitles = categories.map((category, index) => __jsx(Category, {\n    ref: elRefs[index],\n    key: category.id,\n    onClick: () => toggleCategory(category.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(CategoryTitle, {\n    active: category.id === active,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, category.label)));\n  return __jsx(CategoryWrapper, {\n    fitDisplay: fitDevice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }\n  }, catTitles);\n};\n\nexport default Categories;","map":{"version":3,"sources":["/Users/Dev/Desktop/bio-products-ssr/Components/Products/Categories.js"],"names":["React","useState","useEffect","createRef","Category","CategoryTitle","CategoryWrapper","useClientWindow","Categories","categories","toggleCategory","active","catLength","length","elRefs","setElRefs","fitDevice","setFitDevice","Array","fill","map","_","i","current","margin","window","innerWidth","el","offsetWidth","reduce","a","b","index","console","log","catTitles","category","id","label"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,SAApC,QAAoD,OAApD;AACA,SAAQC,QAAR,EAAkBC,aAAlB,EAAiCC,eAAjC,QAAuD,sCAAvD;AACA,SAASC,eAAT,QAAgC,6BAAhC;;AAIA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,cAAd;AAA8BC,EAAAA;AAA9B,CAAD,KAA4C;AAC3D,QAAMC,SAAS,GAAGH,UAAU,CAACI,MAA7B;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBf,KAAK,CAACC,QAAN,CAAe,EAAf,CAA5B;AACA,QAAM;AAAA,OAACe,SAAD;AAAA,OAAYC;AAAZ,MAA4BhB,QAAQ,CAAC,IAAD,CAA1C,CAH2D,CAI3D;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,SAAS,CAAED,MAAD,IACRI,KAAK,CAACN,SAAD,CAAL,CACGO,IADH,GAEGC,GAFH,CAEO,CAACC,CAAD,EAAIC,CAAJ,KAAUR,MAAM,CAACQ,CAAD,CAAN,iBAAanB,SAAS,EAFvC,CADO,CAAT;AAKD,GANQ,EAMN,CAACM,UAAD,CANM,CAAT;AAQAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,MAAM,CAACD,MAAP,GAAgB,CAAhB,IAAqBC,MAAM,CAAC,CAAD,CAAN,CAAUS,OAAV,KAAsB,IAA/C,EAAqD;AACnD,YAAMC,MAAM,GAAGC,MAAM,CAACC,UAAP,GAAoB,GAApB,GAA0B,CAA1B,GAA8B,EAA7C,CADmD,CACF;;AACjDT,MAAAA,YAAY,CACVH,MAAM,CACHM,GADH,CACQO,EAAD,IAAQA,EAAE,CAACJ,OAAH,CAAWK,WAD1B,EAEGC,MAFH,CAEU,CAACC,CAAD,EAAIC,CAAJ,EAAOC,KAAP,KAAiBF,CAAC,GAAGC,CAAJ,GAAQP,MAAM,GAAGQ,KAF5C,KAEsDP,MAAM,CAACC,UAHnD,CAAZ;AAKD;AACF,GATQ,EASN,CAACZ,MAAD,CATM,CAAT;AAWAmB,EAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AAEA,QAAMU,SAAS,GAAG1B,UAAU,CAACW,GAAX,CAAe,CAACgB,QAAD,EAAWJ,KAAX,KAC/B,MAAC,QAAD;AACE,IAAA,GAAG,EAAElB,MAAM,CAACkB,KAAD,CADb;AAEE,IAAA,GAAG,EAAEI,QAAQ,CAACC,EAFhB;AAGE,IAAA,OAAO,EAAE,MAAM3B,cAAc,CAAC0B,QAAQ,CAACC,EAAV,CAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAED,QAAQ,CAACC,EAAT,KAAgB1B,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGyB,QAAQ,CAACE,KADZ,CALF,CADgB,CAAlB;AAWA,SAAO,MAAC,eAAD;AAAiB,IAAA,UAAU,EAAEtB,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyCmB,SAAzC,CAAP;AACD,CAvCH;;AAyCE,eAAe3B,UAAf","sourcesContent":["import React, {useState, useEffect, createRef} from 'react';\nimport {Category, CategoryTitle, CategoryWrapper} from '../../StyledComponents/productsItems'\nimport { useClientWindow } from \"../../Hooks/useClientWindow\";\n\n\n\nconst Categories = ({ categories, toggleCategory, active }) => {\n    const catLength = categories.length;\n    const [elRefs, setElRefs] = React.useState([]);\n    const [fitDevice, setFitDevice] = useState(null);\n    // const window = useClientWindow();\n  \n    useEffect(() => {\n      setElRefs((elRefs) =>\n        Array(catLength)\n          .fill()\n          .map((_, i) => elRefs[i] || createRef())\n      );\n    }, [categories]);\n  \n    useEffect(() => {\n      if (elRefs.length > 0 && elRefs[0].current !== null) {\n        const margin = window.innerWidth < 640 ? 8 : 32; //hardcoded the margins\n        setFitDevice(\n          elRefs\n            .map((el) => el.current.offsetWidth)\n            .reduce((a, b, index) => a + b + margin * index) <= window.innerWidth\n        );\n      }\n    }, [elRefs]);\n\n    console.log(window)\n  \n    const catTitles = categories.map((category, index) => (\n      <Category\n        ref={elRefs[index]}\n        key={category.id}\n        onClick={() => toggleCategory(category.id)}\n      >\n        <CategoryTitle active={category.id === active}>\n          {category.label}\n        </CategoryTitle>\n      </Category>\n    ));\n    return <CategoryWrapper fitDisplay={fitDevice}>{catTitles}</CategoryWrapper>;\n  };\n\n  export default Categories"]},"metadata":{},"sourceType":"module"}
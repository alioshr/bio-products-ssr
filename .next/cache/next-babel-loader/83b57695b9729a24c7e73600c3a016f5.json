{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nexport function useWindowDimension() {\n  _s();\n\n  var _useState = useState(undefined),\n      clientWindow = _useState[0],\n      setClientWindow = _useState[1];\n\n  var _useState2 = useState([]),\n      dimension = _useState2[0],\n      setDimension = _useState2[1];\n\n  useEffect(function () {\n    setClientWindow(window);\n  }, []);\n  useEffect(function () {\n    if (clientWindow !== undefined) {\n      var debouncedResizeHandler = debounce(function () {\n        setDimension([clientWindow.innerWidth, clientWindow.innerHeight]);\n      }, 100); // 100ms\n\n      window.addEventListener('resize', debouncedResizeHandler);\n    }\n  }, [clientWindow]); // Note this empty array. this effect should run only on mount and unmount\n\n  return dimension;\n}\n\n_s(useWindowDimension, \"fYV/bESjXLQeUVz6wcz/CCflRYU=\");\n\nfunction debounce(fn, ms) {\n  var _arguments = arguments,\n      _this = this;\n\n  var timer;\n  return function (_) {\n    clearTimeout(timer);\n    timer = setTimeout(function (_) {\n      timer = null;\n      fn.apply(_this, _arguments);\n    }, ms);\n  };\n}","map":{"version":3,"sources":["/Users/Dev/Desktop/bio-products-ssr/Hooks/useWindowDimension.js"],"names":["React","useState","useEffect","useWindowDimension","undefined","clientWindow","setClientWindow","dimension","setDimension","window","debouncedResizeHandler","debounce","innerWidth","innerHeight","addEventListener","fn","ms","timer","_","clearTimeout","setTimeout","apply","arguments"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAO,SAASC,kBAAT,GAA8B;AAAA;;AAAA,kBACKF,QAAQ,CAACG,SAAD,CADb;AAAA,MAC5BC,YAD4B;AAAA,MACdC,eADc;;AAAA,mBAGDL,QAAQ,CAAC,EAAD,CAHP;AAAA,MAG5BM,SAH4B;AAAA,MAGjBC,YAHiB;;AAKnCN,EAAAA,SAAS,CAAC,YAAM;AACdI,IAAAA,eAAe,CAACG,MAAD,CAAf;AACD,GAFQ,EAEP,EAFO,CAAT;AAIAP,EAAAA,SAAS,CAAC,YAAM;AACf,QAAGG,YAAY,KAAKD,SAApB,EAA+B;AAC9B,UAAMM,sBAAsB,GAAGC,QAAQ,CAAC,YAAM;AAC5CH,QAAAA,YAAY,CAAC,CAACH,YAAY,CAACO,UAAd,EAA0BP,YAAY,CAACQ,WAAvC,CAAD,CAAZ;AACD,OAFsC,EAEpC,GAFoC,CAAvC,CAD8B,CAGrB;;AACTJ,MAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkCJ,sBAAlC;AAEA;AACD,GARQ,EAQN,CAACL,YAAD,CARM,CAAT,CATmC,CAiBf;;AAEpB,SAAOE,SAAP;AACD;;GApBeJ,kB;;AAsBhB,SAASQ,QAAT,CAAkBI,EAAlB,EAAsBC,EAAtB,EAA0B;AAAA;AAAA;;AACxB,MAAIC,KAAJ;AACA,SAAO,UAAAC,CAAC,EAAI;AACVC,IAAAA,YAAY,CAACF,KAAD,CAAZ;AACAA,IAAAA,KAAK,GAAGG,UAAU,CAAC,UAAAF,CAAC,EAAI;AACtBD,MAAAA,KAAK,GAAG,IAAR;AACAF,MAAAA,EAAE,CAACM,KAAH,CAAS,KAAT,EAAeC,UAAf;AACD,KAHiB,EAGfN,EAHe,CAAlB;AAID,GAND;AAOD","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport function useWindowDimension() {\n  const [clientWindow, setClientWindow] = useState(undefined);\n\n  const [dimension, setDimension] = useState([]);\n\n  useEffect(() => {\n    setClientWindow(window)\n  },[])\n\n  useEffect(() => {\n   if(clientWindow !== undefined) {\n    const debouncedResizeHandler = debounce(() => {\n      setDimension([clientWindow.innerWidth, clientWindow.innerHeight]);\n    }, 100); // 100ms\n    window.addEventListener('resize', debouncedResizeHandler);\n    \n   }\n  }, [clientWindow]); // Note this empty array. this effect should run only on mount and unmount\n\n  return dimension;\n}\n\nfunction debounce(fn, ms) {\n  let timer;\n  return _ => {\n    clearTimeout(timer);\n    timer = setTimeout(_ => {\n      timer = null;\n      fn.apply(this, arguments);\n    }, ms);\n  };\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar PRODUCTS_OVERVIEW = \"PRODUCTS_OVERVIEW\";\nvar TOGGLE_CATALOG = '';\n\nvar productsOverview = function productsOverview() {\n  return {\n    type: PRODUCTS_OVERVIEW\n  };\n}; //got to change this dummy thing for http requests when implement the database\n\n\nexport var useProductsOverview = function useProductsOverview() {\n  return function (dispatch, store) {\n    var overview = store().products.overview;\n    var catalogOverview = [];\n\n    for (var key in overview) {\n      catalogOverview.push(_objectSpread({\n        id: key\n      }, overview[key]));\n    }\n\n    dispatch(productsOverview());\n    return catalogOverview;\n  };\n};\n\nvar prepLoadProductsCatalog = function prepLoadProductsCatalog() {\n  return {\n    type: LOAD_PRODUCTS_CATALOG\n  };\n};\n\nexport var useLoadProductsCatalog = function useLoadProductsCatalog(productId) {\n  return function (dispatch, store) {\n    var catalog = store().productsReducer.catalog;\n    var productDetail = {};\n\n    for (var key in catalog) {\n      if (key === productId) {\n        Object.assign(productDetail, catalog[key]);\n      }\n    }\n\n    dispatch(prepLoadProductsCatalog());\n    return productDetail;\n  };\n};","map":{"version":3,"sources":["/Users/Dev/Desktop/bio-products-ssr/store/actions/productsActions.js"],"names":["PRODUCTS_OVERVIEW","TOGGLE_CATALOG","productsOverview","type","useProductsOverview","dispatch","store","overview","products","catalogOverview","key","push","id","prepLoadProductsCatalog","LOAD_PRODUCTS_CATALOG","useLoadProductsCatalog","productId","catalog","productsReducer","productDetail","Object","assign"],"mappings":";;;;;;AACA,IAAMA,iBAAiB,GAAG,mBAA1B;AACA,IAAMC,cAAc,GAAG,EAAvB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAEH;AADH,GAAP;AAGH,CAJD,C,CAKA;;;AACA,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AACrC,SAAO,UAACC,QAAD,EAAWC,KAAX,EAAqB;AACxB,QAAMC,QAAQ,GAAGD,KAAK,GAAGE,QAAR,CAAiBD,QAAlC;AACA,QAAME,eAAe,GAAG,EAAxB;;AACA,SAAI,IAAIC,GAAR,IAAeH,QAAf,EAAyB;AACrBE,MAAAA,eAAe,CAACE,IAAhB;AACIC,QAAAA,EAAE,EAAEF;AADR,SAEOH,QAAQ,CAACG,GAAD,CAFf;AAIH;;AACDL,IAAAA,QAAQ,CAACH,gBAAgB,EAAjB,CAAR;AACA,WAAOO,eAAP;AACH,GAXD;AAYH,CAbM;;AAeP,IAAMI,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AAClC,SAAO;AACHV,IAAAA,IAAI,EAAEW;AADH,GAAP;AAGH,CAJD;;AAMA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,SAAD,EAAe;AACjD,SAAO,UAACX,QAAD,EAAWC,KAAX,EAAqB;AACxB,QAAMW,OAAO,GAAGX,KAAK,GAAGY,eAAR,CAAwBD,OAAxC;AACA,QAAME,aAAa,GAAG,EAAtB;;AACA,SAAK,IAAIT,GAAT,IAAgBO,OAAhB,EAAyB;AACrB,UAAGP,GAAG,KAAKM,SAAX,EAAsB;AAClBI,QAAAA,MAAM,CAACC,MAAP,CAAcF,aAAd,EAA6BF,OAAO,CAACP,GAAD,CAApC;AACH;AACJ;;AACDL,IAAAA,QAAQ,CAACQ,uBAAuB,EAAxB,CAAR;AACA,WAAOM,aAAP;AACH,GAVD;AAWH,CAZM","sourcesContent":["\nconst PRODUCTS_OVERVIEW = \"PRODUCTS_OVERVIEW\";\nconst TOGGLE_CATALOG = ''\n\nconst productsOverview = () => {\n    return {\n        type: PRODUCTS_OVERVIEW\n    }\n}\n//got to change this dummy thing for http requests when implement the database\nexport const useProductsOverview = () => {\n    return (dispatch, store) => {\n        const overview = store().products.overview;\n        const catalogOverview = [];\n        for(let key in overview) {\n            catalogOverview.push({\n                id: key,\n                ...overview[key]\n            })\n        }\n        dispatch(productsOverview());\n        return catalogOverview;\n    }\n}\n\nconst prepLoadProductsCatalog = () => {\n    return {\n        type: LOAD_PRODUCTS_CATALOG\n    }\n}\n\nexport const useLoadProductsCatalog = (productId) => {\n    return (dispatch, store) => {\n        const catalog = store().productsReducer.catalog;\n        const productDetail = {};\n        for (let key in catalog) {\n            if(key === productId) {\n                Object.assign(productDetail, catalog[key])\n            }\n        }\n        dispatch(prepLoadProductsCatalog())\n        return productDetail;\n    }\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/Dev/Desktop/bio-products-ssr/Components/Products/Products.js\",\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, createRef, Fragment } from \"react\";\nimport { ProductsWrapper, Title } from \"../../StyledComponents/productsItems\";\nimport Dropdown from \"../../UI/Dropdown/Dropdown\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useToggleCategory } from \"../../store/actions/actionsIndex\";\nimport { useClientWindow } from \"../../Hooks/useClientWindow\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faShoppingBag, faPlusCircle, faChevronRight, faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { Transition } from \"react-transition-group\";\nimport { Backdrop } from \"../../StyledComponents/main\";\nimport { useWindowDimension } from \"../../Hooks/useWindowDimension\";\nimport Link from \"next/link\";\nimport OverviewDB from \"../../DB/products.json\";\nimport { mapProducts } from \"../../Utilities/utilities\";\nimport CatalogDB from '../../DB/catalog.json';\nimport Categories from './Categories';\nimport ProductPanel from './ProductPannel';\n\nvar Products = function Products(_ref) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  _objectDestructuringEmpty(_ref);\n\n  var _useState = useState(false),\n      navProducts = _useState[0],\n      showNavProducts = _useState[1];\n\n  var _useState2 = useState(null),\n      activeProducts = _useState2[0],\n      setActiveProducts = _useState2[1];\n\n  var store = useSelector(function (state) {\n    return state.products;\n  });\n  var dispatch = useDispatch();\n  var productsOverview = mapProducts(OverviewDB.overview);\n  var activeCategories = OverviewDB.overview[store.activeCatalog].products; //this will be replaced by a catalog\n\n  useEffect(function () {\n    setActiveProducts(CatalogDB.catalog[store.activeCatalog][store.activeCategory]);\n  }, [store.activeCategory, store.activeCatalog]);\n\n  var navProductsToggleHandler = function navProductsToggleHandler() {\n    return showNavProducts(function (state) {\n      return !state;\n    });\n  };\n\n  var toggleCategoryHandler = function toggleCategoryHandler(id) {\n    _s();\n\n    return dispatch(useToggleCategory(id));\n  };\n\n  _s(toggleCategoryHandler, \"b8aGLn/Mzluh0akaKUo24RslKf0=\", false, function () {\n    return [useToggleCategory];\n  });\n\n  return __jsx(ProductsWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, __jsx(Title, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, \"Nossos Produtos\"), __jsx(Dropdown, {\n    onProducts: true,\n    dropDownTitle: OverviewDB.overview[store.activeCatalog].label,\n    showDropDown: navProducts,\n    dropDownTogglerHandler: navProductsToggleHandler,\n    subItems: productsOverview,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), __jsx(Categories, {\n    active: store.activeCategory,\n    categories: activeCategories,\n    toggleCategory: toggleCategoryHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), __jsx(ProductPanel, {\n    products: activeProducts,\n    activeCategory: store.activeCategory,\n    activeCatalog: store.activeCatalog,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s2(Products, \"mWTZ/0bxgXgAPpqr4qytUOnWKj0=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Products;\nexport default Products; // const Categories = ({ categories, toggleCategory, active }) => {\n//   const catLength = categories.length;\n//   const [elRefs, setElRefs] = React.useState([]);\n//   const [fitDevice, setFitDevice] = useState(null);\n//   const window = useClientWindow();\n//   useEffect(() => {\n//     setElRefs((elRefs) =>\n//       Array(catLength)\n//         .fill()\n//         .map((_, i) => elRefs[i] || createRef())\n//     );\n//   }, [categories]);\n//   useEffect(() => {\n//     if (elRefs.length > 0 && elRefs[0].current !== null) {\n//       const margin = window.innerWidth < 640 ? 8 : 32; //hardcoded the margins\n//       setFitDevice(\n//         elRefs\n//           .map((el) => el.current.offsetWidth)\n//           .reduce((a, b, index) => a + b + margin * index) <= window.innerWidth\n//       );\n//     }\n//   }, [elRefs]);\n//   const catTitles = categories.map((category, index) => (\n//     <Category\n//       ref={elRefs[index]}\n//       key={category.id}\n//       onClick={() => toggleCategory(category.id)}\n//     >\n//       <CategoryTitle active={category.id === active}>\n//         {category.label}\n//       </CategoryTitle>\n//     </Category>\n//   ));\n//   return <CategoryWrapper fitDisplay={fitDevice}>{catTitles}</CategoryWrapper>;\n// };\n// //get state and map it from firebase\n// const ProductPanel = ({ products, activeCatalog, activeCategory }) => {\n//   const [showImagesModal, setShowImagesModal] = useState(false);\n//   const [activeImages, setActiveImages] = useState();\n//   const imagesModalHandler = (images) => {\n//     setActiveImages(images);\n//     setShowImagesModal(true);\n//   };\n//   const prod = [];\n//   for (let key in products) {\n//     prod.push({\n//       id: key,\n//       ...products[key],\n//       images: {\n//         ...products[key].images,\n//         paths: Object.values(products[key].images.paths),\n//       },\n//     });\n//   }\n//   const prods = prod.map((p) => (\n//     <Product key={p.id}>\n//       <StockCTA stock={p.stock} />\n//       <OffPrice off={p.off} />\n//       <Image\n//         onClick={() => imagesModalHandler(p.images)}\n//         src={p.images.paths[0]}\n//         alt={p.images.alt}\n//       />\n//       <Name>{p.name}</Name>\n//       <Span>Estoque: {p.stock} unidades</Span>\n//       <Hr />\n//       <Prices price={p.price} off={p.off} />\n//       <IconPanel\n//         path={`/product/${activeCatalog}?activeCategory=${activeCategory}&id=${p.id}`}\n//       />\n//     </Product>\n//   ));\n//   return (\n//     <Fragment>\n//       <Transition in={showImagesModal} timeout={400} mountOnEnter unmountOnExit>\n//         {(state) => (\n//           <ImagesModal\n//             images={activeImages}\n//             closeModal={() => setShowImagesModal(false)}\n//             state={state}\n//           />\n//         )}\n//       </Transition>\n//       <Panel>{prods}</Panel>\n//     </Fragment>\n//   );\n// };\n// const IconPanel = ({ path }) => (\n//   <Icons>\n//     <Link href={path}>\n//       <IconInner>\n//         <FontAwesomeIcon icon={faPlusCircle} size=\"lg\" />\n//         <IconSpan>Info</IconSpan>\n//       </IconInner>\n//     </Link>\n//     <FontAwesomeIcon icon={faShoppingBag} size=\"2x\" />\n//   </Icons>\n// );\n// const StockCTA = ({ stock }) => (\n//   <StockAlert stock={stock}>Ãšltimas Unidades!</StockAlert>\n// );\n// const OffPrice = ({ off }) => <Off off={off}>{off}% OFF!</Off>;\n// const Prices = ({ price, off }) => {\n//   let value = <strong>10 BRL</strong>;\n//   if (off) {\n//     const offPrice = (price - (price * off) / 100).toFixed(2);\n//     value = (\n//       <Fragment>\n//         <PriceSpan off>{price} BRL</PriceSpan>\n//         <PriceSpan>{offPrice} BRL</PriceSpan>\n//       </Fragment>\n//     );\n//   }\n//   return <Price>{value} / unid</Price>;\n// };\n// const ImagesModal = ({ images, state, closeModal }) => {\n//   const [activePic, setActivePic] = useState(0);\n//   const [width, height] = useWindowDimension();\n//   const imgs = images.paths.map((img, i) => (\n//     <ImageInnerWrapper key={i}>\n//       <Image\n//         displayWidth={width}\n//         displayHeight={height}\n//         id={img}\n//         src={img}\n//         alt={images.alt}\n//         modal\n//         slide={activePic}\n//       />\n//     </ImageInnerWrapper>\n//   ));\n//   const markers = images.paths.map((a, i) => (\n//     <ImagesMarker\n//       onClick={() => setActivePic(i)}\n//       active={i === activePic}\n//       key={i}\n//     />\n//   ));\n//   const swapPicturesHandler = (direction) => {\n//     if (activePic < images.paths.length - 1 && direction === \"right\") {\n//       setActivePic((state) => state + 1);\n//     }\n//     if (activePic > 0 && direction === \"left\") {\n//       setActivePic((state) => state - 1);\n//     }\n//   };\n//   return (\n//     <Fragment>\n//       <ViewImages displayWidth={width} displayHeight={height} state={state} s>\n//         <ImagesWrapper>{imgs}</ImagesWrapper>\n//         <ImagesMarkerWrapper>{markers}</ImagesMarkerWrapper>\n//         <ImageArrow onClick={() => swapPicturesHandler(\"left\")} position=\"left\">\n//           <FontAwesomeIcon icon={faChevronLeft} size=\"4x\" />\n//         </ImageArrow>\n//         <ImageArrow\n//           onClick={() => swapPicturesHandler(\"right\")}\n//           position=\"right\"\n//         >\n//           <FontAwesomeIcon icon={faChevronRight} size=\"4x\" />\n//         </ImageArrow>\n//       </ViewImages>\n//       <Backdrop onClick={closeModal} state={state} />\n//     </Fragment>\n//   );\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"Products\");","map":{"version":3,"sources":["/Users/Dev/Desktop/bio-products-ssr/Components/Products/Products.js"],"names":["React","useState","useEffect","createRef","Fragment","ProductsWrapper","Title","Dropdown","useSelector","useDispatch","useToggleCategory","useClientWindow","FontAwesomeIcon","faShoppingBag","faPlusCircle","faChevronRight","faChevronLeft","Transition","Backdrop","useWindowDimension","Link","OverviewDB","mapProducts","CatalogDB","Categories","ProductPanel","Products","navProducts","showNavProducts","activeProducts","setActiveProducts","store","state","products","dispatch","productsOverview","overview","activeCategories","activeCatalog","catalog","activeCategory","navProductsToggleHandler","toggleCategoryHandler","id","label"],"mappings":"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":["import React, { useState, useEffect, createRef, Fragment } from \"react\";\nimport {\n  ProductsWrapper,\n  Title\n} from \"../../StyledComponents/productsItems\";\nimport Dropdown from \"../../UI/Dropdown/Dropdown\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useToggleCategory } from \"../../store/actions/actionsIndex\";\nimport { useClientWindow } from \"../../Hooks/useClientWindow\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faShoppingBag,\n  faPlusCircle,\n  faChevronRight,\n  faChevronLeft,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { Transition } from \"react-transition-group\";\nimport { Backdrop } from \"../../StyledComponents/main\";\nimport { useWindowDimension } from \"../../Hooks/useWindowDimension\";\nimport Link from \"next/link\";\nimport OverviewDB from \"../../DB/products.json\";\nimport { mapProducts } from \"../../Utilities/utilities\";\nimport CatalogDB from '../../DB/catalog.json'\nimport Categories from './Categories';\nimport ProductPanel from './ProductPannel'\n\nconst Products = ({}) => {\n  const [navProducts, showNavProducts] = useState(false);\n  const [activeProducts, setActiveProducts] = useState(null);\n  const store = useSelector((state) => state.products);\n  const dispatch = useDispatch();\n  const productsOverview = mapProducts(OverviewDB.overview);\n  const activeCategories = OverviewDB.overview[store.activeCatalog].products;\n\n  //this will be replaced by a catalog\n  useEffect(() => {\n    setActiveProducts(CatalogDB.catalog[store.activeCatalog][store.activeCategory]);\n  }, [store.activeCategory, store.activeCatalog]);\n\n  const navProductsToggleHandler = () => showNavProducts((state) => !state);\n  const toggleCategoryHandler = (id) => dispatch(useToggleCategory(id));\n\n  return (\n    <ProductsWrapper>\n      <Title>Nossos Produtos</Title>\n      <Dropdown\n        onProducts\n        dropDownTitle={OverviewDB.overview[store.activeCatalog].label}\n        showDropDown={navProducts}\n        dropDownTogglerHandler={navProductsToggleHandler}\n        subItems={productsOverview}\n      />\n      <Categories\n        active={store.activeCategory}\n        categories={activeCategories}\n        toggleCategory={toggleCategoryHandler}\n      />\n      <ProductPanel\n        products={activeProducts}\n        activeCategory={store.activeCategory}\n        activeCatalog={store.activeCatalog}\n      />\n    </ProductsWrapper>\n  );\n};\nexport default Products;\n\n// const Categories = ({ categories, toggleCategory, active }) => {\n//   const catLength = categories.length;\n//   const [elRefs, setElRefs] = React.useState([]);\n//   const [fitDevice, setFitDevice] = useState(null);\n//   const window = useClientWindow();\n\n//   useEffect(() => {\n//     setElRefs((elRefs) =>\n//       Array(catLength)\n//         .fill()\n//         .map((_, i) => elRefs[i] || createRef())\n//     );\n//   }, [categories]);\n\n//   useEffect(() => {\n//     if (elRefs.length > 0 && elRefs[0].current !== null) {\n//       const margin = window.innerWidth < 640 ? 8 : 32; //hardcoded the margins\n//       setFitDevice(\n//         elRefs\n//           .map((el) => el.current.offsetWidth)\n//           .reduce((a, b, index) => a + b + margin * index) <= window.innerWidth\n//       );\n//     }\n//   }, [elRefs]);\n\n//   const catTitles = categories.map((category, index) => (\n//     <Category\n//       ref={elRefs[index]}\n//       key={category.id}\n//       onClick={() => toggleCategory(category.id)}\n//     >\n//       <CategoryTitle active={category.id === active}>\n//         {category.label}\n//       </CategoryTitle>\n//     </Category>\n//   ));\n//   return <CategoryWrapper fitDisplay={fitDevice}>{catTitles}</CategoryWrapper>;\n// };\n\n// //get state and map it from firebase\n// const ProductPanel = ({ products, activeCatalog, activeCategory }) => {\n//   const [showImagesModal, setShowImagesModal] = useState(false);\n//   const [activeImages, setActiveImages] = useState();\n\n//   const imagesModalHandler = (images) => {\n//     setActiveImages(images);\n//     setShowImagesModal(true);\n//   };\n//   const prod = [];\n//   for (let key in products) {\n//     prod.push({\n//       id: key,\n//       ...products[key],\n//       images: {\n//         ...products[key].images,\n//         paths: Object.values(products[key].images.paths),\n//       },\n//     });\n//   }\n\n//   const prods = prod.map((p) => (\n//     <Product key={p.id}>\n//       <StockCTA stock={p.stock} />\n//       <OffPrice off={p.off} />\n//       <Image\n//         onClick={() => imagesModalHandler(p.images)}\n//         src={p.images.paths[0]}\n//         alt={p.images.alt}\n//       />\n//       <Name>{p.name}</Name>\n//       <Span>Estoque: {p.stock} unidades</Span>\n//       <Hr />\n//       <Prices price={p.price} off={p.off} />\n//       <IconPanel\n//         path={`/product/${activeCatalog}?activeCategory=${activeCategory}&id=${p.id}`}\n//       />\n//     </Product>\n//   ));\n//   return (\n//     <Fragment>\n//       <Transition in={showImagesModal} timeout={400} mountOnEnter unmountOnExit>\n//         {(state) => (\n//           <ImagesModal\n//             images={activeImages}\n//             closeModal={() => setShowImagesModal(false)}\n//             state={state}\n//           />\n//         )}\n//       </Transition>\n//       <Panel>{prods}</Panel>\n//     </Fragment>\n//   );\n// };\n\n// const IconPanel = ({ path }) => (\n//   <Icons>\n//     <Link href={path}>\n//       <IconInner>\n//         <FontAwesomeIcon icon={faPlusCircle} size=\"lg\" />\n//         <IconSpan>Info</IconSpan>\n//       </IconInner>\n//     </Link>\n//     <FontAwesomeIcon icon={faShoppingBag} size=\"2x\" />\n//   </Icons>\n// );\n\n// const StockCTA = ({ stock }) => (\n//   <StockAlert stock={stock}>Ãšltimas Unidades!</StockAlert>\n// );\n\n// const OffPrice = ({ off }) => <Off off={off}>{off}% OFF!</Off>;\n\n// const Prices = ({ price, off }) => {\n//   let value = <strong>10 BRL</strong>;\n//   if (off) {\n//     const offPrice = (price - (price * off) / 100).toFixed(2);\n//     value = (\n//       <Fragment>\n//         <PriceSpan off>{price} BRL</PriceSpan>\n//         <PriceSpan>{offPrice} BRL</PriceSpan>\n//       </Fragment>\n//     );\n//   }\n//   return <Price>{value} / unid</Price>;\n// };\n\n// const ImagesModal = ({ images, state, closeModal }) => {\n//   const [activePic, setActivePic] = useState(0);\n//   const [width, height] = useWindowDimension();\n\n//   const imgs = images.paths.map((img, i) => (\n//     <ImageInnerWrapper key={i}>\n//       <Image\n//         displayWidth={width}\n//         displayHeight={height}\n//         id={img}\n//         src={img}\n//         alt={images.alt}\n//         modal\n//         slide={activePic}\n//       />\n//     </ImageInnerWrapper>\n//   ));\n\n//   const markers = images.paths.map((a, i) => (\n//     <ImagesMarker\n//       onClick={() => setActivePic(i)}\n//       active={i === activePic}\n//       key={i}\n//     />\n//   ));\n\n//   const swapPicturesHandler = (direction) => {\n//     if (activePic < images.paths.length - 1 && direction === \"right\") {\n//       setActivePic((state) => state + 1);\n//     }\n//     if (activePic > 0 && direction === \"left\") {\n//       setActivePic((state) => state - 1);\n//     }\n//   };\n//   return (\n//     <Fragment>\n//       <ViewImages displayWidth={width} displayHeight={height} state={state} s>\n//         <ImagesWrapper>{imgs}</ImagesWrapper>\n//         <ImagesMarkerWrapper>{markers}</ImagesMarkerWrapper>\n//         <ImageArrow onClick={() => swapPicturesHandler(\"left\")} position=\"left\">\n//           <FontAwesomeIcon icon={faChevronLeft} size=\"4x\" />\n//         </ImageArrow>\n//         <ImageArrow\n//           onClick={() => swapPicturesHandler(\"right\")}\n//           position=\"right\"\n//         >\n//           <FontAwesomeIcon icon={faChevronRight} size=\"4x\" />\n//         </ImageArrow>\n//       </ViewImages>\n//       <Backdrop onClick={closeModal} state={state} />\n//     </Fragment>\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}